// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/DeepDrivePluginPrivatePCH.h"
#include "GeneratedCppIncludes.h"
#include "DeepDrivePlugin.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1DeepDrivePlugin() {}
FName DEEPDRIVEPLUGIN_BeginCapture = FName(TEXT("BeginCapture"));
FName DEEPDRIVEPLUGIN_OnNewControlData = FName(TEXT("OnNewControlData"));
FName DEEPDRIVEPLUGIN_RegisterCamera = FName(TEXT("RegisterCamera"));
FName DEEPDRIVEPLUGIN_ReleaseAgentControl = FName(TEXT("ReleaseAgentControl"));
FName DEEPDRIVEPLUGIN_RequestAgentControl = FName(TEXT("RequestAgentControl"));
FName DEEPDRIVEPLUGIN_SetAgentControlValues = FName(TEXT("SetAgentControlValues"));
static class UEnum* EDeepDriveCameraType_StaticEnum()
{
	extern DEEPDRIVEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_DeepDrivePlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern DEEPDRIVEPLUGIN_API class UEnum* Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType, Z_Construct_UPackage__Script_DeepDrivePlugin(), TEXT("EDeepDriveCameraType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDeepDriveCameraType(EDeepDriveCameraType_StaticEnum, TEXT("/Script/DeepDrivePlugin"), TEXT("EDeepDriveCameraType"), false, nullptr, nullptr);
	void UCaptureCameraComponent::StaticRegisterNativesUCaptureCameraComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCaptureCameraComponent::StaticClass(), "ActivateCapturing",(Native)&UCaptureCameraComponent::execActivateCapturing);
		FNativeFunctionRegistrar::RegisterFunction(UCaptureCameraComponent::StaticClass(), "DeactivateCapturing",(Native)&UCaptureCameraComponent::execDeactivateCapturing);
		FNativeFunctionRegistrar::RegisterFunction(UCaptureCameraComponent::StaticClass(), "Initialize",(Native)&UCaptureCameraComponent::execInitialize);
	}
	IMPLEMENT_CLASS(UCaptureCameraComponent, 1748766734);
	void UCaptureSinkComponentBase::StaticRegisterNativesUCaptureSinkComponentBase()
	{
	}
	IMPLEMENT_CLASS(UCaptureSinkComponentBase, 2706566808);
	void UDiskCaptureSinkComponent::StaticRegisterNativesUDiskCaptureSinkComponent()
	{
	}
	IMPLEMENT_CLASS(UDiskCaptureSinkComponent, 4136031736);
	void USharedMemCaptureSinkComponent::StaticRegisterNativesUSharedMemCaptureSinkComponent()
	{
	}
	IMPLEMENT_CLASS(USharedMemCaptureSinkComponent, 1044840387);
class UScriptStruct* FDeepDriveControlData::StaticStruct()
{
	extern DEEPDRIVEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_DeepDrivePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DEEPDRIVEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FDeepDriveControlData();
		extern DEEPDRIVEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FDeepDriveControlData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDeepDriveControlData, Z_Construct_UPackage__Script_DeepDrivePlugin(), TEXT("DeepDriveControlData"), sizeof(FDeepDriveControlData), Get_Z_Construct_UScriptStruct_FDeepDriveControlData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDeepDriveControlData(FDeepDriveControlData::StaticStruct, TEXT("/Script/DeepDrivePlugin"), TEXT("DeepDriveControlData"), false, nullptr, nullptr);
static struct FScriptStruct_DeepDrivePlugin_StaticRegisterNativesFDeepDriveControlData
{
	FScriptStruct_DeepDrivePlugin_StaticRegisterNativesFDeepDriveControlData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DeepDriveControlData")),new UScriptStruct::TCppStructOps<FDeepDriveControlData>);
	}
} ScriptStruct_DeepDrivePlugin_StaticRegisterNativesFDeepDriveControlData;
class UScriptStruct* FDeepDriveDataOut::StaticStruct()
{
	extern DEEPDRIVEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_DeepDrivePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DEEPDRIVEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FDeepDriveDataOut();
		extern DEEPDRIVEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FDeepDriveDataOut_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDeepDriveDataOut, Z_Construct_UPackage__Script_DeepDrivePlugin(), TEXT("DeepDriveDataOut"), sizeof(FDeepDriveDataOut), Get_Z_Construct_UScriptStruct_FDeepDriveDataOut_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDeepDriveDataOut(FDeepDriveDataOut::StaticStruct, TEXT("/Script/DeepDrivePlugin"), TEXT("DeepDriveDataOut"), false, nullptr, nullptr);
static struct FScriptStruct_DeepDrivePlugin_StaticRegisterNativesFDeepDriveDataOut
{
	FScriptStruct_DeepDrivePlugin_StaticRegisterNativesFDeepDriveDataOut()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DeepDriveDataOut")),new UScriptStruct::TCppStructOps<FDeepDriveDataOut>);
	}
} ScriptStruct_DeepDrivePlugin_StaticRegisterNativesFDeepDriveDataOut;
class UScriptStruct* FCaptureCyle::StaticStruct()
{
	extern DEEPDRIVEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_DeepDrivePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern DEEPDRIVEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureCyle();
		extern DEEPDRIVEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FCaptureCyle_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCaptureCyle, Z_Construct_UPackage__Script_DeepDrivePlugin(), TEXT("CaptureCyle"), sizeof(FCaptureCyle), Get_Z_Construct_UScriptStruct_FCaptureCyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCaptureCyle(FCaptureCyle::StaticStruct, TEXT("/Script/DeepDrivePlugin"), TEXT("CaptureCyle"), false, nullptr, nullptr);
static struct FScriptStruct_DeepDrivePlugin_StaticRegisterNativesFCaptureCyle
{
	FScriptStruct_DeepDrivePlugin_StaticRegisterNativesFCaptureCyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CaptureCyle")),new UScriptStruct::TCppStructOps<FCaptureCyle>);
	}
} ScriptStruct_DeepDrivePlugin_StaticRegisterNativesFCaptureCyle;
	FDeepDriveDataOut ADeepDriveCaptureProxy::BeginCapture()
	{
		DeepDriveCaptureProxy_eventBeginCapture_Parms Parms;
		ProcessEvent(FindFunctionChecked(DEEPDRIVEPLUGIN_BeginCapture),&Parms);
		return Parms.ReturnValue;
	}
	void ADeepDriveCaptureProxy::StaticRegisterNativesADeepDriveCaptureProxy()
	{
		FNativeFunctionRegistrar::RegisterFunction(ADeepDriveCaptureProxy::StaticClass(), "Capture",(Native)&ADeepDriveCaptureProxy::execCapture);
	}
	IMPLEMENT_CLASS(ADeepDriveCaptureProxy, 2990283794);
	void ADeepDriveControlProxy::OnNewControlData(FDeepDriveControlData const& controlData)
	{
		DeepDriveControlProxy_eventOnNewControlData_Parms Parms;
		Parms.controlData=controlData;
		ProcessEvent(FindFunctionChecked(DEEPDRIVEPLUGIN_OnNewControlData),&Parms);
	}
	void ADeepDriveControlProxy::StaticRegisterNativesADeepDriveControlProxy()
	{
	}
	IMPLEMENT_CLASS(ADeepDriveControlProxy, 2802497044);
	void UDeepDrivePluginBPFunctionLibrary::StaticRegisterNativesUDeepDrivePluginBPFunctionLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UDeepDrivePluginBPFunctionLibrary::StaticClass(), "Capture",(Native)&UDeepDrivePluginBPFunctionLibrary::execCapture);
	}
	IMPLEMENT_CLASS(UDeepDrivePluginBPFunctionLibrary, 1063657790);
	int32 ADeepDriveServerProxy::RegisterCamera(float FieldOfView, int32 CaptureWidth, int32 CaptureHeight, FVector RelativePosition, FVector RelativeRotation)
	{
		DeepDriveServerProxy_eventRegisterCamera_Parms Parms;
		Parms.FieldOfView=FieldOfView;
		Parms.CaptureWidth=CaptureWidth;
		Parms.CaptureHeight=CaptureHeight;
		Parms.RelativePosition=RelativePosition;
		Parms.RelativeRotation=RelativeRotation;
		ProcessEvent(FindFunctionChecked(DEEPDRIVEPLUGIN_RegisterCamera),&Parms);
		return Parms.ReturnValue;
	}
	void ADeepDriveServerProxy::ReleaseAgentControl()
	{
		ProcessEvent(FindFunctionChecked(DEEPDRIVEPLUGIN_ReleaseAgentControl),NULL);
	}
	bool ADeepDriveServerProxy::RequestAgentControl()
	{
		DeepDriveServerProxy_eventRequestAgentControl_Parms Parms;
		ProcessEvent(FindFunctionChecked(DEEPDRIVEPLUGIN_RequestAgentControl),&Parms);
		return !!Parms.ReturnValue;
	}
	void ADeepDriveServerProxy::SetAgentControlValues(float steering, float throttle, float brake, bool handbrake)
	{
		DeepDriveServerProxy_eventSetAgentControlValues_Parms Parms;
		Parms.steering=steering;
		Parms.throttle=throttle;
		Parms.brake=brake;
		Parms.handbrake=handbrake ? true : false;
		ProcessEvent(FindFunctionChecked(DEEPDRIVEPLUGIN_SetAgentControlValues),&Parms);
	}
	void ADeepDriveServerProxy::StaticRegisterNativesADeepDriveServerProxy()
	{
	}
	IMPLEMENT_CLASS(ADeepDriveServerProxy, 4293089728);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent();
	ENGINE_API class UClass* Z_Construct_UClass_USceneCaptureComponent2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	DEEPDRIVEPLUGIN_API class UEnum* Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_UCaptureCameraComponent_ActivateCapturing();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_UCaptureCameraComponent_DeactivateCapturing();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_UCaptureCameraComponent_Initialize();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UCaptureCameraComponent_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UCaptureCameraComponent();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UCaptureSinkComponentBase_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UCaptureSinkComponentBase();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UDiskCaptureSinkComponent_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UDiskCaptureSinkComponent();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_USharedMemCaptureSinkComponent_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_USharedMemCaptureSinkComponent();
	DEEPDRIVEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FDeepDriveControlData();
	DEEPDRIVEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FDeepDriveDataOut();
	DEEPDRIVEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FCaptureCyle();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveCaptureProxy_BeginCapture();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveCaptureProxy_Capture();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_ADeepDriveCaptureProxy_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_ADeepDriveCaptureProxy();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveControlProxy_OnNewControlData();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_ADeepDriveControlProxy_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_ADeepDriveControlProxy();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_UDeepDrivePluginBPFunctionLibrary_Capture();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UDeepDrivePluginBPFunctionLibrary_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_UDeepDrivePluginBPFunctionLibrary();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_RegisterCamera();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_ReleaseAgentControl();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_RequestAgentControl();
	DEEPDRIVEPLUGIN_API class UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_SetAgentControlValues();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_ADeepDriveServerProxy_NoRegister();
	DEEPDRIVEPLUGIN_API class UClass* Z_Construct_UClass_ADeepDriveServerProxy();
	DEEPDRIVEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_DeepDrivePlugin();
	UEnum* Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_DeepDrivePlugin();
		extern uint32 Get_Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EDeepDriveCameraType"), 0, Get_Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDeepDriveCameraType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_NONE")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_FRONT")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_LEFT")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_RIGHT")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_FRONT_LEFT")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_FRONT_RIGHT")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_BACK_LEFT")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_BACK_RIGHT")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_BACK")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDeepDriveCameraType::DDC_CAMERA_MAX")), 9));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EDeepDriveCameraType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_BACK.DisplayName"), TEXT("BackCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_BACK_LEFT.DisplayName"), TEXT("BackLeftCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_BACK_RIGHT.DisplayName"), TEXT("BackRightCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_FRONT.DisplayName"), TEXT("FrontCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_FRONT_LEFT.DisplayName"), TEXT("FrontLeftCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_FRONT_RIGHT.DisplayName"), TEXT("FrontRightCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_LEFT.DisplayName"), TEXT("LeftCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_NONE.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("DDC_CAMERA_RIGHT.DisplayName"), TEXT("RightCamera"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureDefines.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType_CRC() { return 556642164U; }
	UFunction* Z_Construct_UFunction_UCaptureCameraComponent_ActivateCapturing()
	{
		UObject* Outer=Z_Construct_UClass_UCaptureCameraComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ActivateCapturing"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Capturing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCaptureCameraComponent_DeactivateCapturing()
	{
		UObject* Outer=Z_Construct_UClass_UCaptureCameraComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeactivateCapturing"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Capturing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCaptureCameraComponent_Initialize()
	{
		struct CaptureCameraComponent_eventInitialize_Parms
		{
			UTextureRenderTarget2D* RenderTarget;
		};
		UObject* Outer=Z_Construct_UClass_UCaptureCameraComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Initialize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CaptureCameraComponent_eventInitialize_Parms));
			UProperty* NewProp_RenderTarget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RenderTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RenderTarget, CaptureCameraComponent_eventInitialize_Parms), 0x0010000000000080, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Capturing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCaptureCameraComponent_NoRegister()
	{
		return UCaptureCameraComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UCaptureCameraComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCameraComponent();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = UCaptureCameraComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCaptureCameraComponent_ActivateCapturing());
				OuterClass->LinkChild(Z_Construct_UFunction_UCaptureCameraComponent_DeactivateCapturing());
				OuterClass->LinkChild(Z_Construct_UFunction_UCaptureCameraComponent_Initialize());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_m_SceneCapture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("m_SceneCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(m_SceneCapture, UCaptureCameraComponent), 0x0040000000080008, Z_Construct_UClass_USceneCaptureComponent2D_NoRegister());
				UProperty* NewProp_SceneRenderTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SceneRenderTarget"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SceneRenderTarget, UCaptureCameraComponent), 0x0010000000000015, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CaptureSceneEveryFrame, UCaptureCameraComponent, bool);
				UProperty* NewProp_CaptureSceneEveryFrame = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaptureSceneEveryFrame"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CaptureSceneEveryFrame, UCaptureCameraComponent), 0x0010000000010001, CPP_BOOL_PROPERTY_BITMASK(CaptureSceneEveryFrame, UCaptureCameraComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsCapturingActive, UCaptureCameraComponent, bool);
				UProperty* NewProp_IsCapturingActive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsCapturingActive"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsCapturingActive, UCaptureCameraComponent), 0x0010000000010015, CPP_BOOL_PROPERTY_BITMASK(IsCapturingActive, UCaptureCameraComponent), sizeof(bool), true);
				UProperty* NewProp_CameraId = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CameraId, UCaptureCameraComponent), 0x0010000000000014);
				UProperty* NewProp_CameraType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CameraType, UCaptureCameraComponent), 0x0010000000000001, Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCaptureCameraComponent_ActivateCapturing(), "ActivateCapturing"); // 1277557461
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCaptureCameraComponent_DeactivateCapturing(), "DeactivateCapturing"); // 3370042077
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCaptureCameraComponent_Initialize(), "Initialize"); // 760686617
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("Category"), TEXT("DeepDrivePlugin"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Rendering LOD Trigger PhysicsVolume"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(NewProp_m_SceneCapture, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_m_SceneCapture, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(NewProp_SceneRenderTarget, TEXT("Category"), TEXT("CaptureCamera"));
				MetaData->SetValue(NewProp_SceneRenderTarget, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(NewProp_CaptureSceneEveryFrame, TEXT("Category"), TEXT("CaptureCamera"));
				MetaData->SetValue(NewProp_CaptureSceneEveryFrame, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(NewProp_IsCapturingActive, TEXT("Category"), TEXT("CaptureCamera"));
				MetaData->SetValue(NewProp_IsCapturingActive, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(NewProp_CameraId, TEXT("Category"), TEXT("CaptureCamera"));
				MetaData->SetValue(NewProp_CameraId, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
				MetaData->SetValue(NewProp_CameraType, TEXT("Category"), TEXT("CaptureCamera"));
				MetaData->SetValue(NewProp_CameraType, TEXT("ModuleRelativePath"), TEXT("Public/Capture/CaptureCameraComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCaptureCameraComponent(Z_Construct_UClass_UCaptureCameraComponent, &UCaptureCameraComponent::StaticClass, TEXT("UCaptureCameraComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCaptureCameraComponent);
	UClass* Z_Construct_UClass_UCaptureSinkComponentBase_NoRegister()
	{
		return UCaptureSinkComponentBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UCaptureSinkComponentBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = UCaptureSinkComponentBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("CaptureSink/CaptureSinkComponentBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/CaptureSinkComponentBase.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCaptureSinkComponentBase(Z_Construct_UClass_UCaptureSinkComponentBase, &UCaptureSinkComponentBase::StaticClass, TEXT("UCaptureSinkComponentBase"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCaptureSinkComponentBase);
	UClass* Z_Construct_UClass_UDiskCaptureSinkComponent_NoRegister()
	{
		return UDiskCaptureSinkComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UDiskCaptureSinkComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCaptureSinkComponentBase();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = UDiskCaptureSinkComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BaseFileName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BaseFileName, UDiskCaptureSinkComponent), 0x0010000000000005);
				UProperty* NewProp_CameraTypePaths = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraTypePaths"), RF_Public|RF_Transient|RF_MarkAsNative) UMapProperty(CPP_PROPERTY_BASE(CameraTypePaths, UDiskCaptureSinkComponent), 0x0010000000000005);
				UProperty* NewProp_CameraTypePaths_Key_KeyProp = new(EC_InternalUseOnlyConstructor, NewProp_CameraTypePaths, TEXT("CameraTypePaths_Key"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000001, Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType());
				UProperty* NewProp_CameraTypePaths_ValueProp = new(EC_InternalUseOnlyConstructor, NewProp_CameraTypePaths, TEXT("CameraTypePaths"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 1, 0x0000000000000001);
				UProperty* NewProp_BasePathOnLinux = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasePathOnLinux"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BasePathOnLinux, UDiskCaptureSinkComponent), 0x0010000000000005);
				UProperty* NewProp_BasePathOnWindows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BasePathOnWindows"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BasePathOnWindows, UDiskCaptureSinkComponent), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("Category"), TEXT("DeepDrivePlugin"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("CaptureSink/DiskCaptureSink/DiskCaptureSinkComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/DiskCaptureSink/DiskCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_BaseFileName, TEXT("Category"), TEXT("Destination"));
				MetaData->SetValue(NewProp_BaseFileName, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/DiskCaptureSink/DiskCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_CameraTypePaths, TEXT("Category"), TEXT("Destination"));
				MetaData->SetValue(NewProp_CameraTypePaths, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/DiskCaptureSink/DiskCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_BasePathOnLinux, TEXT("Category"), TEXT("Destination"));
				MetaData->SetValue(NewProp_BasePathOnLinux, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/DiskCaptureSink/DiskCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_BasePathOnWindows, TEXT("Category"), TEXT("Destination"));
				MetaData->SetValue(NewProp_BasePathOnWindows, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/DiskCaptureSink/DiskCaptureSinkComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDiskCaptureSinkComponent(Z_Construct_UClass_UDiskCaptureSinkComponent, &UDiskCaptureSinkComponent::StaticClass, TEXT("UDiskCaptureSinkComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDiskCaptureSinkComponent);
	UClass* Z_Construct_UClass_USharedMemCaptureSinkComponent_NoRegister()
	{
		return USharedMemCaptureSinkComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USharedMemCaptureSinkComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCaptureSinkComponentBase();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = USharedMemCaptureSinkComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxSharedMemSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSharedMemSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxSharedMemSize, USharedMemCaptureSinkComponent), 0x0010000000000005);
				UProperty* NewProp_SharedMemNameWindows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SharedMemNameWindows"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SharedMemNameWindows, USharedMemCaptureSinkComponent), 0x0010000000000005);
				UProperty* NewProp_SharedMemNameLinux = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SharedMemNameLinux"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SharedMemNameLinux, USharedMemCaptureSinkComponent), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("Category"), TEXT("DeepDrivePlugin"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("CaptureSink/SharedMemSink/SharedMemCaptureSinkComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/SharedMemSink/SharedMemCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_MaxSharedMemSize, TEXT("Category"), TEXT("SharedMem"));
				MetaData->SetValue(NewProp_MaxSharedMemSize, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/SharedMemSink/SharedMemCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_SharedMemNameWindows, TEXT("Category"), TEXT("SharedMem"));
				MetaData->SetValue(NewProp_SharedMemNameWindows, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/SharedMemSink/SharedMemCaptureSinkComponent.h"));
				MetaData->SetValue(NewProp_SharedMemNameLinux, TEXT("Category"), TEXT("SharedMem"));
				MetaData->SetValue(NewProp_SharedMemNameLinux, TEXT("ModuleRelativePath"), TEXT("Public/CaptureSink/SharedMemSink/SharedMemCaptureSinkComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USharedMemCaptureSinkComponent(Z_Construct_UClass_USharedMemCaptureSinkComponent, &USharedMemCaptureSinkComponent::StaticClass, TEXT("USharedMemCaptureSinkComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USharedMemCaptureSinkComponent);
	UScriptStruct* Z_Construct_UScriptStruct_FDeepDriveControlData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DeepDrivePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FDeepDriveControlData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DeepDriveControlData"), sizeof(FDeepDriveControlData), Get_Z_Construct_UScriptStruct_FDeepDriveControlData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeepDriveControlData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDeepDriveControlData>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ShouldReset, FDeepDriveControlData, bool);
			UProperty* NewProp_ShouldReset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShouldReset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ShouldReset, FDeepDriveControlData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(ShouldReset, FDeepDriveControlData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsGameDriving, FDeepDriveControlData, bool);
			UProperty* NewProp_IsGameDriving = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IsGameDriving"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsGameDriving, FDeepDriveControlData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(IsGameDriving, FDeepDriveControlData), sizeof(bool), true);
			UProperty* NewProp_Handbrake = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Handbrake"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Handbrake, FDeepDriveControlData), 0x0010000000000005);
			UProperty* NewProp_Brake = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Brake"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Brake, FDeepDriveControlData), 0x0010000000000005);
			UProperty* NewProp_Throttle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Throttle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Throttle, FDeepDriveControlData), 0x0010000000000005);
			UProperty* NewProp_Steering = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Steering"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Steering, FDeepDriveControlData), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_ShouldReset, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_ShouldReset, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_IsGameDriving, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_IsGameDriving, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Handbrake, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Handbrake, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Brake, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Brake, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Throttle, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Throttle, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Steering, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Steering, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDeepDriveControlData_CRC() { return 977015453U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDeepDriveDataOut()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DeepDrivePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FDeepDriveDataOut_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DeepDriveDataOut"), sizeof(FDeepDriveDataOut), Get_Z_Construct_UScriptStruct_FDeepDriveDataOut_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeepDriveDataOut"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDeepDriveDataOut>, EStructFlags(0x00000001));
			UProperty* NewProp_LapNumber = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LapNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(LapNumber, FDeepDriveDataOut), 0x0010000000000005);
			UProperty* NewProp_DistanceToCenterOfLane = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DistanceToCenterOfLane"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceToCenterOfLane, FDeepDriveDataOut), 0x0010000000000005);
			UProperty* NewProp_DistanceAlongRoute = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DistanceAlongRoute"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DistanceAlongRoute, FDeepDriveDataOut), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Handbrake, FDeepDriveDataOut, bool);
			UProperty* NewProp_Handbrake = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Handbrake"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Handbrake, FDeepDriveDataOut), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Handbrake, FDeepDriveDataOut), sizeof(bool), true);
			UProperty* NewProp_Brake = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Brake"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Brake, FDeepDriveDataOut), 0x0010000000000005);
			UProperty* NewProp_Throttle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Throttle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Throttle, FDeepDriveDataOut), 0x0010000000000005);
			UProperty* NewProp_Steering = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Steering"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Steering, FDeepDriveDataOut), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsResetting, FDeepDriveDataOut, bool);
			UProperty* NewProp_IsResetting = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IsResetting"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsResetting, FDeepDriveDataOut), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(IsResetting, FDeepDriveDataOut), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsGameDriving, FDeepDriveDataOut, bool);
			UProperty* NewProp_IsGameDriving = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IsGameDriving"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsGameDriving, FDeepDriveDataOut), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(IsGameDriving, FDeepDriveDataOut), sizeof(bool), true);
			UProperty* NewProp_Speed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Speed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Speed, FDeepDriveDataOut), 0x0010000000000005);
			UProperty* NewProp_Dimension = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dimension"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Dimension, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngularAcceleration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularAcceleration"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngularAcceleration, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngularVelocity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AngularVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngularVelocity, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Acceleration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Acceleration"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Acceleration, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Velocity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Velocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Velocity, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, FDeepDriveDataOut), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Unreal -> (Python) Client"));
			MetaData->SetValue(NewProp_LapNumber, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_LapNumber, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_DistanceToCenterOfLane, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_DistanceToCenterOfLane, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_DistanceAlongRoute, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_DistanceAlongRoute, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Handbrake, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Handbrake, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Brake, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Brake, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Throttle, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Throttle, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Steering, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Steering, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_IsResetting, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_IsResetting, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_IsGameDriving, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_IsGameDriving, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Speed, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Speed, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Dimension, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Dimension, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_AngularAcceleration, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_AngularAcceleration, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_AngularVelocity, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_AngularVelocity, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Acceleration, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Velocity, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Velocity, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Rotation, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
			MetaData->SetValue(NewProp_Position, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/DeepDriveData.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDeepDriveDataOut_CRC() { return 2163180607U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCaptureCyle()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_DeepDrivePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FCaptureCyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("CaptureCyle"), sizeof(FCaptureCyle), Get_Z_Construct_UScriptStruct_FCaptureCyle_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureCyle"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCaptureCyle>, EStructFlags(0x00000001));
			UProperty* NewProp_Cameras = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Cameras"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Cameras, FCaptureCyle), 0x0010000000000005);
			UProperty* NewProp_Cameras_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Cameras, TEXT("Cameras"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UEnum_DeepDrivePlugin_EDeepDriveCameraType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
			MetaData->SetValue(NewProp_Cameras, TEXT("Category"), TEXT("Default"));
			MetaData->SetValue(NewProp_Cameras, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCaptureCyle_CRC() { return 2910138244U; }
	UFunction* Z_Construct_UFunction_ADeepDriveCaptureProxy_BeginCapture()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveCaptureProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeginCapture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(DeepDriveCaptureProxy_eventBeginCapture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, DeepDriveCaptureProxy_eventBeginCapture_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FDeepDriveDataOut());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DeepDrivePlugin"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADeepDriveCaptureProxy_Capture()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveCaptureProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Capture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DeepDrivePlugin"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADeepDriveCaptureProxy_NoRegister()
	{
		return ADeepDriveCaptureProxy::StaticClass();
	}
	UClass* Z_Construct_UClass_ADeepDriveCaptureProxy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = ADeepDriveCaptureProxy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveCaptureProxy_BeginCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveCaptureProxy_Capture());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CaptureCycles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaptureCycles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(CaptureCycles, ADeepDriveCaptureProxy), 0x0010000000000005);
				UProperty* NewProp_CaptureCycles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CaptureCycles, TEXT("CaptureCycles"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCaptureCyle());
				UProperty* NewProp_CaptureInterval = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaptureInterval"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CaptureInterval, ADeepDriveCaptureProxy), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveCaptureProxy_BeginCapture(), "BeginCapture"); // 3292624459
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveCaptureProxy_Capture(), "Capture"); // 3152793247
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Capture/DeepDriveCaptureProxy.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
				MetaData->SetValue(NewProp_CaptureCycles, TEXT("Category"), TEXT("Capturing"));
				MetaData->SetValue(NewProp_CaptureCycles, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
				MetaData->SetValue(NewProp_CaptureInterval, TEXT("Category"), TEXT("Capturing"));
				MetaData->SetValue(NewProp_CaptureInterval, TEXT("ModuleRelativePath"), TEXT("Public/Capture/DeepDriveCaptureProxy.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADeepDriveCaptureProxy(Z_Construct_UClass_ADeepDriveCaptureProxy, &ADeepDriveCaptureProxy::StaticClass, TEXT("ADeepDriveCaptureProxy"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADeepDriveCaptureProxy);
	UFunction* Z_Construct_UFunction_ADeepDriveControlProxy_OnNewControlData()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveControlProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnNewControlData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08420800, 65535, sizeof(DeepDriveControlProxy_eventOnNewControlData_Parms));
			UProperty* NewProp_controlData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("controlData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(controlData, DeepDriveControlProxy_eventOnNewControlData_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FDeepDriveControlData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DeepDriveControl"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Control/DeepDriveControlProxy.h"));
			MetaData->SetValue(NewProp_controlData, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADeepDriveControlProxy_NoRegister()
	{
		return ADeepDriveControlProxy::StaticClass();
	}
	UClass* Z_Construct_UClass_ADeepDriveControlProxy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = ADeepDriveControlProxy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveControlProxy_OnNewControlData());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxSharedMemSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSharedMemSize"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxSharedMemSize, ADeepDriveControlProxy), 0x0010000000000005);
				UProperty* NewProp_SharedMemNameWindows = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SharedMemNameWindows"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SharedMemNameWindows, ADeepDriveControlProxy), 0x0010000000000005);
				UProperty* NewProp_SharedMemNameLinux = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SharedMemNameLinux"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SharedMemNameLinux, ADeepDriveControlProxy), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveControlProxy_OnNewControlData(), "OnNewControlData"); // 2862839140
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Control/DeepDriveControlProxy.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Control/DeepDriveControlProxy.h"));
				MetaData->SetValue(NewProp_MaxSharedMemSize, TEXT("Category"), TEXT("SharedMem"));
				MetaData->SetValue(NewProp_MaxSharedMemSize, TEXT("ModuleRelativePath"), TEXT("Public/Control/DeepDriveControlProxy.h"));
				MetaData->SetValue(NewProp_SharedMemNameWindows, TEXT("Category"), TEXT("SharedMem"));
				MetaData->SetValue(NewProp_SharedMemNameWindows, TEXT("ModuleRelativePath"), TEXT("Public/Control/DeepDriveControlProxy.h"));
				MetaData->SetValue(NewProp_SharedMemNameLinux, TEXT("Category"), TEXT("SharedMem"));
				MetaData->SetValue(NewProp_SharedMemNameLinux, TEXT("ModuleRelativePath"), TEXT("Public/Control/DeepDriveControlProxy.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADeepDriveControlProxy(Z_Construct_UClass_ADeepDriveControlProxy, &ADeepDriveControlProxy::StaticClass, TEXT("ADeepDriveControlProxy"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADeepDriveControlProxy);
	UFunction* Z_Construct_UFunction_UDeepDrivePluginBPFunctionLibrary_Capture()
	{
		UObject* Outer=Z_Construct_UClass_UDeepDrivePluginBPFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Capture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("DeepDrivePlugin"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/DeepDrivePluginBPFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Register a capture camera component with DeepDriveCapture"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UDeepDrivePluginBPFunctionLibrary_NoRegister()
	{
		return UDeepDrivePluginBPFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UDeepDrivePluginBPFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = UDeepDrivePluginBPFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UDeepDrivePluginBPFunctionLibrary_Capture());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UDeepDrivePluginBPFunctionLibrary_Capture(), "Capture"); // 3485206424
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DeepDrivePluginBPFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/DeepDrivePluginBPFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDeepDrivePluginBPFunctionLibrary(Z_Construct_UClass_UDeepDrivePluginBPFunctionLibrary, &UDeepDrivePluginBPFunctionLibrary::StaticClass, TEXT("UDeepDrivePluginBPFunctionLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDeepDrivePluginBPFunctionLibrary);
	UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_RegisterCamera()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveServerProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RegisterCamera"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08820800, 65535, sizeof(DeepDriveServerProxy_eventRegisterCamera_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, DeepDriveServerProxy_eventRegisterCamera_Parms), 0x0010000000000580);
			UProperty* NewProp_RelativeRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RelativeRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeRotation, DeepDriveServerProxy_eventRegisterCamera_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_RelativePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RelativePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativePosition, DeepDriveServerProxy_eventRegisterCamera_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_CaptureHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CaptureHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CaptureHeight, DeepDriveServerProxy_eventRegisterCamera_Parms), 0x0010000000000080);
			UProperty* NewProp_CaptureWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CaptureWidth"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(CaptureWidth, DeepDriveServerProxy_eventRegisterCamera_Parms), 0x0010000000000080);
			UProperty* NewProp_FieldOfView = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FieldOfView"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FieldOfView, DeepDriveServerProxy_eventRegisterCamera_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CameraConfiguration"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_ReleaseAgentControl()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveServerProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleaseAgentControl"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_RequestAgentControl()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveServerProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RequestAgentControl"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(DeepDriveServerProxy_eventRequestAgentControl_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, DeepDriveServerProxy_eventRequestAgentControl_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, DeepDriveServerProxy_eventRequestAgentControl_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, DeepDriveServerProxy_eventRequestAgentControl_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADeepDriveServerProxy_SetAgentControlValues()
	{
		UObject* Outer=Z_Construct_UClass_ADeepDriveServerProxy();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAgentControlValues"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(DeepDriveServerProxy_eventSetAgentControlValues_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(handbrake, DeepDriveServerProxy_eventSetAgentControlValues_Parms, bool);
			UProperty* NewProp_handbrake = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("handbrake"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(handbrake, DeepDriveServerProxy_eventSetAgentControlValues_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(handbrake, DeepDriveServerProxy_eventSetAgentControlValues_Parms), sizeof(bool), true);
			UProperty* NewProp_brake = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("brake"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(brake, DeepDriveServerProxy_eventSetAgentControlValues_Parms), 0x0010000000000080);
			UProperty* NewProp_throttle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("throttle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(throttle, DeepDriveServerProxy_eventSetAgentControlValues_Parms), 0x0010000000000080);
			UProperty* NewProp_steering = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("steering"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(steering, DeepDriveServerProxy_eventSetAgentControlValues_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Control"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADeepDriveServerProxy_NoRegister()
	{
		return ADeepDriveServerProxy::StaticClass();
	}
	UClass* Z_Construct_UClass_ADeepDriveServerProxy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_DeepDrivePlugin();
			OuterClass = ADeepDriveServerProxy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveServerProxy_RegisterCamera());
				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveServerProxy_ReleaseAgentControl());
				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveServerProxy_RequestAgentControl());
				OuterClass->LinkChild(Z_Construct_UFunction_ADeepDriveServerProxy_SetAgentControlValues());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Port = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Port"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Port, ADeepDriveServerProxy), 0x0010000000000005);
				UProperty* NewProp_IPAddress = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IPAddress"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(IPAddress, ADeepDriveServerProxy), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveServerProxy_RegisterCamera(), "RegisterCamera"); // 1069214432
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveServerProxy_ReleaseAgentControl(), "ReleaseAgentControl"); // 3026886995
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveServerProxy_RequestAgentControl(), "RequestAgentControl"); // 768883341
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ADeepDriveServerProxy_SetAgentControlValues(), "SetAgentControlValues"); // 3945916168
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Server/DeepDriveServerProxy.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
				MetaData->SetValue(NewProp_Port, TEXT("Category"), TEXT("Server"));
				MetaData->SetValue(NewProp_Port, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
				MetaData->SetValue(NewProp_IPAddress, TEXT("Category"), TEXT("Server"));
				MetaData->SetValue(NewProp_IPAddress, TEXT("ModuleRelativePath"), TEXT("Public/Server/DeepDriveServerProxy.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADeepDriveServerProxy(Z_Construct_UClass_ADeepDriveServerProxy, &ADeepDriveServerProxy::StaticClass, TEXT("ADeepDriveServerProxy"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADeepDriveServerProxy);
	UPackage* Z_Construct_UPackage__Script_DeepDrivePlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/DeepDrivePlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x7075B6E8;
			Guid.B = 0xDF915CD5;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
